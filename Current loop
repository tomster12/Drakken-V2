

//    TODO
// Move client connnection code to mainCanvas
// Update how locked in works
// Update all instances of gameScoreUpdateSend
// Clean up where score updates are sent
// Finish mapping game loop




//    MAIN GAME LOOP FOR CONNECTING

- mainCanvas.changeToScreen(CONNECT) is called
- screen changed to connecting screen
- gameConnectRequest is sent to the server


- the server figures out whether user is
  accepted.

  - server if accepted:
    - gameConnectResponse {"accepted": true,
      "playerNum": 0 or 1}
    - add players socket to list
    - call gameStart() on server if 2 people
  - server if denied:
    - gameConnectResponse {"accepted": false,
      "playerNum": -1}


- on receiving the connectResponse

  - client if accepted:
    - mainCanvas.changeToScreen(GAME, player num)
  - client if denied:
    - mainCanvas.changeToScreen(MENU, {"text":
    "could not connect", "time": 60}


- on changing to gameScreen
- change gameScreen class to menuScreen class


- on gameStart on server
- reset variables
- send gameStart to both clients
- gameScreen.gameStart called
- resetVariables, generate tokens and dice




//    MAIN GAME LOOP FOR PLAYING

//lock turn// lock the turn variable
//officially lock turn// send turn lock to server

- when using a showToken
- decide whether it will complete turn
- this factors in partial tokens and extraToken
- //lock turn// if to complete

- use the tokens action with callback
- pass in {complete, token and showToken}
- the action can affect params

  - callback will call animateOffscreen
  - pass in previous params and another callback
    - callback will //officially lock turn// if necessary

  - if token affects enemy tell enemy to call
    foreign action for token
  - dont pass showToken over as it breaks

    - gameScreen receives foreign token request
    - calls the foreignAction for the token
    - this action can affect params
    - pass in params from network
